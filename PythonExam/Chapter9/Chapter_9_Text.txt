第9章 科学计算和可视化

Computing is not about computers any more. It is about living.
计算不再关乎计算机，它与生活处处相关
				—— Nicholas Negroponte

学习目标
1. 了解科学计算的基本概念
2. 了解数据可视化的概念
3. 运用科学计算库进行矩阵分析和数值运算
4. 了解图像的矩阵表示和处理
5. 运用数据绘图库进行坐标系绘制
6. 运用数据绘图库进行雷达图绘制

9.1 问题概述
- 要点：科学计算需要采用矩阵运算库numpy和绘制库matplotlib
- 人类认识世界遵循由表及里、由定性到定量、有数据到规律的过程。以下这些都离不开基
  于数学和运算的科学表达，都需要科学计算的支持
    - 说明事物属性
    - 展示数据规律
    - 阐述规律原理
    - 论述观点
    - 支持决策
    - 预测分析
- 科学计算是为了解决科学和工程中数学问题而利用计算机进行的数值计算，它不仅是科学
  家在运算自然规律时所采用的的方法，更是普通人提升专业化程度的必要手段
- 开展基本的科学计算需要两个步骤：
    - 组织数据
        - 运算的基础，也是将客观世界数字化的必要手段
    - 展示数据
        - 体现运算结果的重要方式，也是展示结论的有力武器
- 本章将分别介绍
    - 用于组织和运算数据的numpy
    - 用于展示数据并绘制专业图标的matplotlib
- 补充一个简单的数学概念——矩阵（Matrix）
    - 矩阵是一个按照长方阵列排列的复数或实数集合
    - 最早来自于方程组的系数及常数所构成的方阵
    - 矩阵是高等代数学中的常用工具，主要应用于统计数学、物理学、电路学、力学、光
      学、量子物理、计算机图像和动画等领域
    - 传统的科学计算主要基于矩阵运算，因为大量数值通过矩阵可以有效组织和表达
    - 科学计算领域最著名的计算平台Matlab（Matrix Laboratory 矩阵实验室）采用矩
      阵作为最基础的变量类型。
    - 矩阵有维度概念
        - 一维矩阵是线性的，类似于列表
        - 二维矩阵是表格状的，这是常用的数据表示形式
    - 科学计算与传统计算的一个显著区别在于，科学计算以矩阵而不是单一数值为基础，增
      加了计算密度，能够表达更为复杂的数据运算逻辑
    - 拓展：离散和连续
        - 矩阵是一个典型的离散变量类型，它将一些数据组织到一起。
        - 从人类观测角度，世界可以被解释成一个个离散的观测值
        - 从微观角度，世界是原子不停运动的结果，应该是连续的
        - 再微端到量子力学角度，任何连续运动都是最小粒子量子运动的结果，世界应
          该是离散的
        - 宇宙有最小粒子吗？
        - 宇宙是不确定的，还是确定的？世界是概率的，还是微积分的？
        - 醒醒，开始看程序
- 思考与练习
    9.1 请思考在日常工作和生活中科学计算还有什么应用
        - 科学计算可以用于工程计算，如室内位置定位、动画结算、图形计算等
    
9.2 模块8：numpy库的使用
- 要点：numpy是用于处理含有同种元素的多维数组运算的第三方库
- 9.2.1 numpy库概述
    - numpy已经成为科学计算事实上的标准库
    - numpy库处理的最基础数据类型是由同种元素构成的多维数组(ndarray),简称
      「数组」
        - 数组中所有元素的类型必须相同
        - 数组中的元素可以用整数索引，序号从0开始
        - ndarray类型的维度(dimensions)叫轴(axes),轴的个数叫秩(rank)
            一维数组的秩为1，二维数组的秩为2
        - 二维数组相当于由两个一维数组构成
    - 由于numpy函数较多且命名容易与常用命名混淆，建议采用如下方式引用
        - import numpy as np
        - as保留字能改变后续代码中的库的命名空间，有助于提高代码可读性
- 9.2.2 numpy库解析
    - 7个常用数组创建函数
        - np.array([x,y,z], dtype=int)
            - 从Python列表和元组创建数组
        - np.arange(x,y,i)
            - 创建一个由x到y，以i为步长的数组
        - np.linspace(x,y,n)
            - 创建一个由x到y，等分成n个元素的数组
            - abbr. 线性等分向量（linear space）
        - np.indices((m,n))
            - 创建一个m行n列的矩阵
        - np.random.rand(m,n)
            - 创建一个m行n列的随机数组
        - np.ones((m,n), dtype)
            - 创建一个m行n列全1的数组，dtype是数据类型
        - np.empty((m,n), dtype)
            - 创建一个m行n列全0的数组，dtype是数据类型
    - 7个ndarray类的常用属性
        - ndarray.ndim
            - 数组轴的个数，也被称作秩
        - ndarray.shape
            - 数组在每个维度上大小的整数元组
        - ndarray.size
            - 数组元素的总个数
        - ndarray.dtype
            - 数组元素的数据类型，dtype类型可以用于创建数组
        - ndarray.itemsize
            - 数组中每个元素的字节大小
        - ndarray.data
            - 包含实际数组元素的缓冲区地址
        - ndarray.flat
            - 数组元素的迭代器
    - 5个ndarray类的形态操作方法
        - ndarray.reshape(n,m)
            - 不改变数组ndarray，返回一个维度为(n,m)的数组
        - ndarray.resize(new_shape)
            - 与reshape()作用相同，直接修改数组ndarray
        - ndarray.swapaxes(ax1, ax2)
            - 将数组n个维度中任意两个维度进行调换
        - ndarray.flatten()
            - 对数组进行降维，返回一个折叠后的一维数组
            - 相当于平铺数组中的数据，在矩阵运算及图像处理中用处很大
        - ndarray.ravel
            - 作用同np.flatten()，但是返回数组的一个视图
    - 5个ndarray类的索引和切片方法
        - x[i]
            - 索引第i个元素
            - np.random.rand(5,3)[2]  #获得5x3随机数数组的第2行数据
        - x[-i]
            - 从后向前索引第i个元素
        - x[n:m]
            - 默认步长为1，从前往后索引，不包含m
        - x[-m:-n]
            - 默认步长为1，从后向前索引，结束位置为n
            - np.random.rand(5,3)[-5:-2:2]
    - 8个numpy库的算术运算函数
        - 以下函数中，输出参数y可选，未指定时，将创建并返回一个新的数组保存
          计算结果。指定时，则将结果保存到参数中。
            - 例如，np.add(a, b, a)表示a += b
        - np.add(x1, x2 [,y])
            - y = x1 + x2
        - np.subtract(x1, x2 [,y])
            - y = x1 - x2
        - np.multiply(x1, x2 [,y])
            - y = x1 * x2
        - np.divide(x1, x2 [,y])
            - y = x1 / x2
        - np.floor_divide(x1, x2 [,y])
            - y = x1 // x2, 返回值取整
        - np.negative(x [,y])
            - y = -x
        - np.power(x1, x2 [,y])
            - y = x1 ** x2
        - np.remainder(x1, x2 [,y])
            - y = x1 % x2
    - 7个numpy库的比较运算函数
        - np.equal(x1, x2 [,y])
            - y = x1 == x2
        - np.not_equal(x1, x2 [,y])
        - np.less(x1, x2 [,y])
        - np.lese_equal(x1, x2 [,y])
        - np.greater(x1, x2 [,y])
        - np.greater_equal(x1, x2 [,y])
        - np.where(conditional[x, y])
            - 根据给出的条件判断输出x还是y
            - where()函数是三元表达式x if condition else y的矢量版本
        - 以上函数返回一个布尔数组，包含两个数组中对应元素值的比较结果
            - np.less([1,2],[2,2])  # array([True, False], dtype=bool)
    - 9个numpy库的其他运算函数
        - np.abs(x)
            - 计算基于元素的整型、浮点或复数的绝对值
        - np.sqrt(x)
            - 计算每个元素的平方根
        - np.squre(x)
            - 计算每个元素的平方
        - np.sign(x)
            - 计算每个元素的符号：1(+), 0, -1(-)
        - np.ceil(x)
            - 计算大于或等于每个元素的最小值
        - np.floor(x)
            - 计算小于或等于每个元素的最大值
        - np.rint(x[, out])
            - 圆整，取每个元素为最近的整数，保留数据类型
        - np.exp(x[, out])
            - 计算每个元素的指数值
        - np.log(x)
            - 计算自然对数(e)
        - np.log10(x)
            - 计算基于10的对数
        - np.log2(x)
            - 计算基于2的对数
    - numpy库还包括
        - 三角运算函数
        - 傅里叶变换
        - 随机和概率分布
        - 基本数值统计
        - 位运算
        - 矩阵运算等非常丰富的功能
    - 拓展：运算规则
        - 实数的算术运算时最为常见的运算规则，类似的，矩阵也有算术运算。
          一个完备的运算体系包括运算基本单位和运算规则。
        - 在numpy中，运算基本单位是数组，运算规则与实数一样，包括算术运算、
          比较运算、统计运算、三角运算、随机运算等
          

9.3 实例17：图像的手绘效果
- 要点：这是一个使用numpy和PIL库提取图像特征形成手绘效果的实例
- 9.3.1 图像的数组表示
    - 图像是有规则的二维数据，可以用numpy库将图像转换成数组对象
        - img = np.array(Image.open('./pic/test.jpg'))
    - PIL库包括图像转换函数，能够改变图像单个像素的表示形式，使用convert()
      函数，这是'L'模式，表示将像素从RGB的3字节形式转变为单一数值形式，数值
      范围为0~255，表示灰度色彩变化。此时，图像从彩色变为带有灰度的黑白色。
      转换后，图像的ndarray类型变为二维数据，每个像素点色彩只由一个整数表示
    - 通过对图像的数组转换，可利用numpy访问图像上的任意像素值，例如，获取位于
      坐标(20,300)像素的颜色值或获取图像中最大的最小的像素值
        - img[20,300]
        - int(img.min())
    - 也可采用切片方式获取指定行或列的元素值，甚至修改这些值
        - img[10,:]
        - img[:10]
    - 将图像读入ndarray数组对象后，可以通过任意数学操作来获取相应的图像变换。
    - 拓展：灰度值
        - 指黑白图像中点的颜色深度，范围从0到255，黑色为0，白色为255，因此，
          黑白图像也被成为灰度图像。
        - 黑白图像主要用于构建非可见光图像，例如医学中超声波形成的图像等
        - RGB彩色图片可以通过如下公式转换成灰度值：
            - Gray=R*0.3 + G*0.59 + B*0.11
        - 严格说，黑白图像是计算能力或存储能力不充分时形成图像的重要方式，如果
          单个像素点能获得数据值种类超过256且计算资源足够，采用彩色图像也可以
          构建非可见光图谱，例如医学应用中新发展的彩色超声波成像等
- 9.3.2 图像的手绘效果
    - 手绘图像的基本思想是利用像素之间的梯度值(而不是像素本身)重构每个像素值。
      为了体现光照效果，设计一个光源，建立光源对各点梯度值的影响函数，进而运算
      出新的像素值，从而体现边界点灰度变化，形成手绘效果。

9.4 模块9：matplotlib库的使用
- 要点：matplotlib是提供数据绘图功能的第三方库，其pyplot子库主要用于实现各种
  数据展示图形的绘制
- 9.4.1 matplotlib.pyplot库概述
    - 引用方式
        - import matplotlib.pyplot as plt
    - 为正确显示中文字体，更改默认设置
        - matplotlib.rcParams['font.family']='SimHei'
        - matplotlib.rcParams['font.sans-serif']=['SimHei']
    - matplotlib库由一系列有组织有隶属关系的对象构成，这对基础绘图操作来说过
      于复杂，因此，matplotlib提供了一套快捷命令式的绘图接口函数，即pyplot
      子模块。
    - pyplot将绘图所需的对象构建过程封装在函数中，对用户提供了更加友好的接口
    - pyplot模块提供了一批预定义的绘图函数，大多数可从函数名称辨别其功能
- 9.4.2 matplotlib.pyplot库解析
    - 4个plt库的绘图区域函数
        - plt.figure(figsize=None, facecolor=None)
            - 创建一个全局绘图区域
        - plt.axes(rect, axisbg='w')
            - 创建一个坐标系风格的子绘图区域
        - plt.subplot(nrows, ncols, plot_number)
            - 在全局绘图区域中创建一个子绘图区域
        - plt.subplot_adjust()
            - 调整子绘图区域的布局
            



9.5 实例18：科学坐标系绘制

9.6 实例19：多级雷达图绘制

本章小结
